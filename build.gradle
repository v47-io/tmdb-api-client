import io.gitlab.arturbosch.detekt.Detekt
import io.gitlab.arturbosch.detekt.DetektPlugin
import io.gitlab.arturbosch.detekt.report.ReportMergeTask

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath(libs.remalGradlePlugins)
    }
}

plugins {
    alias(libs.plugins.kotlinJvm) apply false
    alias(libs.plugins.kotlinKapt) apply false
    alias(libs.plugins.kotlinPluginAllopen) apply false
    alias(libs.plugins.kotlinPluginSpring) apply false

    alias(libs.plugins.gitProperties) apply false
    alias(libs.plugins.license) apply false
    alias(libs.plugins.detekt) apply false
    alias(libs.plugins.release)
    alias(libs.plugins.dokka)
}

task reportMerge(type: ReportMergeTask) {
    output = project.layout.buildDirectory.file("reports/detekt/merge.sarif")
}

subprojects {
    apply plugin: libs.plugins.kotlinJvm.get().pluginId
    apply plugin: libs.plugins.detekt.get().pluginId
    apply plugin: libs.plugins.gitProperties.get().pluginId
    apply plugin: libs.plugins.license.get().pluginId
    apply plugin: libs.plugins.dokka.get().pluginId

    apply plugin: 'jacoco'

    apply plugin: 'maven-publish'

    project.configurations.getByName('compileOnly').setCanBeResolved(true)

    kotlin {
        jvmToolchain(17)
    }

    compileKotlin {
        compilerOptions {
            freeCompilerArgs = ['-Xno-param-assertions', '-Xno-call-assertions']
            javaParameters = true
        }
    }

    compileTestKotlin {
        compilerOptions {
            javaParameters = true
        }
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation libs.slf4j

        testImplementation libs.junitApi
        testRuntimeOnly libs.junitEngine

        testRuntimeOnly libs.logback
    }

    gitProperties {
        gitPropertiesName = "${rootProject.name}-${project.name}-version.properties"
    }

    detekt {
        input = files('src')

        reports {
            xml.required.set(true)
            sarif.required.set(true)
        }
    }

    plugins.withType(DetektPlugin) {
        tasks.withType(Detekt) { detektTask ->
            finalizedBy(reportMerge)

            reportMerge.configure { mergeTask ->
                mergeTask.input.from(detektTask.sarifReportFile)
            }
        }
    }

    jacoco {
        toolVersion = '0.8.11'
    }

    test {
        useJUnitPlatform()
        jacoco {
            destinationFile = file("$buildDir/jacoco/test.exec")
        }
    }

    license {
        exclude '**/*.json'
        exclude '**/*.properties'
        exclude '**/META-INF/**/*'

        header = file('../LICENSE')
        skipExistingHeaders = true

        ext {
            year = Calendar.getInstance().get(Calendar.YEAR)
        }
    }

    dokkaHtmlPartial {
        dokkaSourceSets {
            configureEach {
                perPackageOption {
                    matchingRegex.set(".*\\.(impl|utils).*")
                    suppress.set(true)
                }

                includes.from("$projectDir/docs.md")
            }
        }
    }

    dokkaJavadoc {
        dokkaSourceSets {
            configureEach {
                perPackageOption {
                    matchingRegex.set(".*\\.(impl|utils).*")
                    suppress.set(true)
                }

                includes.from("$projectDir/docs.md")
            }
        }
    }

    task packageJavadoc(type: Jar, dependsOn: dokkaJavadoc) {
        archiveClassifier = 'javadoc'
        from dokkaJavadoc.outputDirectory
    }

    task packageSources(type: Jar) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts.archives packageSources

    publishing {
        publications {
            tmdbApiClient(MavenPublication) {
                groupId project.group
                artifactId project.name
                version project.version

                from components.java

                artifact packageSources {
                    archiveClassifier.set('sources')
                }

                artifact packageJavadoc {
                    archiveClassifier.set('javadoc')
                }

                pom {
                    name = "TMDb API Client :: ${project.name}"
                    url = "https://github.com/v47-io/tmdb-api-client"

                    licenses {
                        license {
                            name = 'BSD 3-Clause Clear License'
                            url = 'https://spdx.org/licenses/BSD-3-Clause-Clear.html'
                        }
                    }

                    developers {
                        developer {
                            id = 'vemilyus'
                            name = 'Alex Katlein'
                            email = 'dev@vemilyus.com'
                        }
                    }

                    scm {
                        connection = 'scm:git:https://github.com/v47-io/tmdb-api-client.git'
                        developerConnection = 'scm:git:ssh://git@github.com/v47-io/tmdb-api-client.git'
                        url = 'https://github.com/v47-io/tmdb-api-client'
                    }
                }
            }
        }

        def ossrhUser = project.hasProperty("ossrhUser") ? project.getProperty("ossrhUser") : System.getenv("OSSRH_USER")
        def ossrhPass = project.hasProperty("ossrhPass") ? project.getProperty("ossrhPass") : System.getenv("OSSRH_PASS")

        if (ossrhUser != null && ossrhPass != null) {
            apply plugin: 'signing'
            apply plugin: 'name.remal.maven-publish-ossrh'

            repositories {
                ossrh {
                    credentials {
                        username = ossrhUser
                        password = ossrhPass
                    }
                }
            }
        }
    }
}

repositories {
    mavenCentral()
}

release {
    tagTemplate = 'v$version'
}
