plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.31' apply false
    id 'io.gitlab.arturbosch.detekt' version '1.0.0-RC14' apply false
    id 'net.researchgate.release' version '2.8.0'
    // id 'org.jetbrains.dokka' version '0.9.18' apply false
}

subprojects {
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'io.gitlab.arturbosch.detekt'
    // apply plugin: 'org.jetbrains.dokka'

    apply plugin: 'jacoco'

    apply plugin: 'maven'
    apply plugin: 'maven-publish'

    apply from: '../libraries.gradle'

    sourceSets {
        main {
            kotlin {
                srcDirs {
                    'src'
                }
            }
            java {
                srcDir 'src'
                srcDir 'src-gen'
            }
            resources {
                srcDir 'resources'
                srcDir 'resources-gen'
            }
        }
        test {
            kotlin {
                srcDirs {
                    'test'
                }
            }
            java {
                srcDir 'test'
            }
            resources {
                srcDir 'test-resources'
            }
        }
    }

    sourceCompatibility = 11
    targetCompatibility = 11

    compileKotlin {
        kotlinOptions {
            freeCompilerArgs = ['-Xno-param-assertions', '-Xno-call-assertions']
            kotlinOptions.jvmTarget = '11'
        }
    }

    compileTestKotlin {
        kotlinOptions.jvmTarget = '11'
    }

    repositories {
        maven { url 'https://nexus.vemilyus.com/repository/maven-all/' }
    }

    dependencies {
        implementation libraries.stdlib
        implementation libraries.slf4j

        testImplementation libraries.junitApi
        testRuntimeOnly libraries.junitEngine

        testRuntimeOnly libraries.logback
    }

    detekt {
        input = files('src')
        config = files('../detekt.yml')
        filters = '.*test.*,.*/resources/.*,.*/tmp/.*'

        reports {
            xml {
                enabled = true
                destination = file("$buildDir/reports/detekt.xml")
            }
        }
    }

    jacoco {
        toolVersion = '0.8.4'
    }

    test {
        useJUnitPlatform()
        jacoco {
            destinationFile = file("$buildDir/jacoco/test.exec")
        }
    }

    /*dokka {
        moduleName = project.name

        outputFormat = 'html'
        outputDirectory = "$buildDir/kdoc"

        jdkVersion = 11

        impliedPlatforms = ["JVM"]

        noStdlibLink = false
    }

    task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
        outputFormat = 'javadoc'
        outputDirectory = "$buildDir/javadoc"
    }

    task packageJavadoc(type: Jar, dependsOn: dokkaJavadoc) {
        classifier = 'javadoc'
        from "$buildDir/javadoc"
    }*/

    task packageSources(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts.archives packageSources

    publishing {
        publications {
            mavenProject(MavenPublication) {
                from components.java
                groupId project.group
                artifactId project.name
                version project.version

                artifact packageSources {
                    classifier 'sources'
                }

                /*artifact packageJavadoc {
                    classifier 'javadoc'
                }*/
            }
        }

        def nexusUser = project.hasProperty('nexusUser') ? project.property('nexusUser') : System.getenv('NEXUS_USER')
        def nexusPass = project.hasProperty('nexusPass') ? project.property('nexusPass') : System.getenv('NEXUS_PASS')

        if (nexusUser != null && nexusPass != null) {
            repositories {
                maven {
                    name 'vemilyus-nexus'

                    if (project.version.endsWith('-SNAPSHOT'))
                        url 'https://nexus.vemilyus.com/repository/snapshots/'
                    else
                        url 'https://nexus.vemilyus.com/repository/releases/'

                    credentials(PasswordCredentials) {
                        username nexusUser
                        password nexusPass
                    }
                }
            }
        }
    }
}

release {
    tagTemplate = 'v$version'
}

task build {
    dependsOn subprojects.findResults { it.tasks.findByName('build') }
}
