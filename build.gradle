import io.gitlab.arturbosch.detekt.Detekt
import io.gitlab.arturbosch.detekt.DetektPlugin
import io.gitlab.arturbosch.detekt.report.ReportMergeTask

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.6.21' apply false
    id "org.jetbrains.kotlin.kapt" version '1.6.21' apply false
    id 'org.jetbrains.kotlin.plugin.allopen' version '1.6.21' apply false
    id 'org.jetbrains.kotlin.plugin.spring' version '1.6.21' apply false

    id 'io.gitlab.arturbosch.detekt' version '1.20.0' apply false
    id 'net.researchgate.release' version '2.8.1'
    id 'com.github.hierynomus.license' version '0.16.1' apply false
    // id 'org.jetbrains.dokka' version '0.9.18' apply false
}

task reportMerge(type: ReportMergeTask) {
    output = project.layout.buildDirectory.file("reports/detekt/merge.sarif")
}

subprojects {
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'io.gitlab.arturbosch.detekt'
    apply plugin: 'com.github.hierynomus.license'
    // apply plugin: 'org.jetbrains.dokka'

    apply plugin: 'jacoco'

    apply plugin: 'maven-publish'

    apply from: '../libraries.gradle'

    sourceSets {
        main {
            kotlin {
                srcDirs {
                    'src'
                }
            }
            java {
                srcDir 'src'
                srcDir 'src-gen'
            }
            resources {
                srcDir 'resources'
                srcDir 'resources-gen'
            }
        }
        test {
            kotlin {
                srcDirs {
                    'test'
                }
            }
            java {
                srcDir 'test'
            }
            resources {
                srcDir 'test-resources'
            }
        }
    }

    sourceCompatibility = 11
    targetCompatibility = 11

    compileKotlin {
        kotlinOptions {
            freeCompilerArgs = ['-Xno-param-assertions', '-Xno-call-assertions']

            jvmTarget = '11'
            javaParameters = true
        }
    }

    compileTestKotlin {
        kotlinOptions {
            jvmTarget = '11'
            javaParameters = true
        }
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation libraries.stdlib
        implementation libraries.slf4j

        testImplementation libraries.junitApi
        testRuntimeOnly libraries.junitEngine

        testRuntimeOnly libraries.logback
    }

    detekt {
        input = files('src')
        config = files('../detekt.yml')

        reports {
            xml.required.set(true)
            sarif.required.set(true)
        }
    }

    plugins.withType(DetektPlugin) {
        tasks.withType(Detekt) { detektTask ->
            finalizedBy(reportMerge)

            reportMerge.configure { mergeTask ->
                mergeTask.input.from(detektTask.sarifReportFile)
            }
        }
    }

    test {
        useJUnitPlatform()
        jacoco {
            destinationFile = file("$buildDir/jacoco/test.exec")
        }
    }

    license {
        exclude '**/*.json'
        exclude '**/*.properties'
        exclude '**/META-INF/**/*'

        header = file('../HEADER.txt')

        ext {
            year = Calendar.getInstance().get(Calendar.YEAR)
        }
    }

    /*dokka {
        moduleName = project.name

        outputFormat = 'html'
        outputDirectory = "$buildDir/kdoc"

        jdkVersion = 11

        impliedPlatforms = ["JVM"]

        noStdlibLink = false
    }

    task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
        outputFormat = 'javadoc'
        outputDirectory = "$buildDir/javadoc"
    }

    task packageJavadoc(type: Jar, dependsOn: dokkaJavadoc) {
        classifier = 'javadoc'
        from "$buildDir/javadoc"
    }*/

    task packageSources(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts.archives packageSources

    publishing {
        publications {
            mavenProject(MavenPublication) {
                from components.java
                groupId project.group
                artifactId project.name
                version project.version

                artifact packageSources {
                    classifier 'sources'
                }

                /*artifact packageJavadoc {
                    classifier 'javadoc'
                }*/
            }
        }

        def nexusUser = project.hasProperty('nexusUser') ? project.property('nexusUser') : System.getenv('NEXUS_USER')
        def nexusPass = project.hasProperty('nexusPass') ? project.property('nexusPass') : System.getenv('NEXUS_PASS')

        if (nexusUser != null && nexusPass != null) {
            repositories {
                maven {
                    name 'vemilyus-nexus'

                    if (project.version.endsWith('-SNAPSHOT'))
                        url 'https://nexus3.v47.dev/repository/snapshots/'
                    else
                        url 'https://nexus.v47.dev/repository/releases/'

                    credentials(PasswordCredentials) {
                        username nexusUser
                        password nexusPass
                    }
                }
            }
        }
    }
}

release {
    tagTemplate = 'v$version'
}

task build(group: "build") {
    dependsOn subprojects.findResults { it.tasks.findByName('build') }
}
