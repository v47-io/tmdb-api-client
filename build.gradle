import io.gitlab.arturbosch.detekt.Detekt
import io.gitlab.arturbosch.detekt.DetektPlugin
import io.gitlab.arturbosch.detekt.report.ReportMergeTask

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.6.21' apply false
    id 'org.jetbrains.kotlin.kapt' version '1.6.21' apply false
    id 'org.jetbrains.kotlin.plugin.allopen' version '1.6.21' apply false
    id 'org.jetbrains.kotlin.plugin.spring' version '1.6.21' apply false
    id 'io.quarkus' version '2.10.2.Final' apply false
    id 'io.quarkus.extension' version '2.10.2.Final' apply false

    id 'com.github.hierynomus.license' version '0.16.1' apply false
    id 'com.github.jk1.dependency-license-report' version '2.1'
    id 'io.gitlab.arturbosch.detekt' version '1.21.0-RC2' apply false
    id 'name.remal.maven-publish-ossrh' version '1.5.0' apply false
    id 'net.researchgate.release' version '3.0.0'
    id 'org.jetbrains.dokka' version '1.6.21'
}

task reportMerge(type: ReportMergeTask) {
    output = project.layout.buildDirectory.file("reports/detekt/merge.sarif")
}

subprojects {
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'io.gitlab.arturbosch.detekt'
    apply plugin: 'com.github.hierynomus.license'
    apply plugin: 'org.jetbrains.dokka'

    apply plugin: 'jacoco'

    apply plugin: 'maven-publish'

    apply from: '../libraries.gradle'

    project.configurations.getByName('compileOnly').setCanBeResolved(true)

    sourceSets {
        main {
            kotlin {
                srcDirs {
                    'src'
                }
            }
            java {
                srcDir 'src'
                srcDir 'src-gen'
            }
            resources {
                srcDir 'resources'
                srcDir 'resources-gen'
            }
        }
        test {
            kotlin {
                srcDirs {
                    'test'
                }
            }
            java {
                srcDir 'test'
            }
            resources {
                srcDir 'test-resources'
            }
        }
    }

    sourceCompatibility = 11
    targetCompatibility = 11

    compileKotlin {
        kotlinOptions {
            freeCompilerArgs = ['-Xno-param-assertions', '-Xno-call-assertions']

            jvmTarget = "${JavaVersion.VERSION_11}"
            javaParameters = true
        }
    }

    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "${JavaVersion.VERSION_11}"
            javaParameters = true
        }
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation libraries.stdlib
        implementation libraries.slf4j

        testImplementation libraries.junitApi
        testRuntimeOnly libraries.junitEngine

        testRuntimeOnly libraries.logback
    }

    detekt {
        input = files('src')

        reports {
            xml.required.set(true)
            sarif.required.set(true)
        }
    }

    plugins.withType(DetektPlugin) {
        tasks.withType(Detekt) { detektTask ->
            finalizedBy(reportMerge)

            reportMerge.configure { mergeTask ->
                mergeTask.input.from(detektTask.sarifReportFile)
            }
        }
    }

    test {
        useJUnitPlatform()
        jacoco {
            destinationFile = file("$buildDir/jacoco/test.exec")
        }
    }

    license {
        exclude '**/*.json'
        exclude '**/*.properties'
        exclude '**/META-INF/**/*'

        header = file('../LICENSE')

        ext {
            year = Calendar.getInstance().get(Calendar.YEAR)
        }
    }

    dokkaHtmlPartial {
        dokkaSourceSets {
            configureEach {
                perPackageOption {
                    matchingRegex.set(".*\\.(impl|utils).*")
                    suppress.set(true)
                }

                includes.from("$projectDir/docs.md")
            }
        }
    }

    dokkaJavadoc {
        dokkaSourceSets {
            configureEach {
                perPackageOption {
                    matchingRegex.set(".*\\.(impl|utils).*")
                    suppress.set(true)
                }

                includes.from("$projectDir/docs.md")
            }
        }
    }

    task packageJavadoc(type: Jar, dependsOn: dokkaJavadoc) {
        classifier = 'javadoc'
        from dokkaJavadoc.outputDirectory
    }

    task packageSources(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts.archives packageSources

    publishing {
        publications {
            tmdbApiClient(MavenPublication) {
                groupId project.group
                artifactId project.name
                version project.version

                from components.java

                artifact packageSources {
                    classifier 'sources'
                }

                artifact packageJavadoc {
                    classifier 'javadoc'
                }

                pom {
                    name = "TMDb API Client :: ${project.name}"
                    url = "https://github.com/v47-io/tmdb-api-client"

                    licenses {
                        license {
                            name = 'BSD 3-Clause License'
                            url = 'https://opensource.org/licenses/BSD-3-Clause'
                        }
                    }

                    developers {
                        developer {
                            id = 'vemilyus'
                            name = 'Alex Katlein'
                            email = 'dev@vemilyus.com'
                        }
                    }

                    scm {
                        connection = 'scm:git:https://github.com/v47-io/tmdb-api-client.git'
                        developerConnection = 'scm:git:ssh://git@github.com/v47-io/tmdb-api-client.git'
                        url = 'https://github.com/v47-io/tmdb-api-client'
                    }
                }
            }
        }

        def ossrhUser = project.hasProperty("ossrhUser") ? project.getProperty("ossrhUser") : System.getenv("OSSRH_USER")
        def ossrhPass = project.hasProperty("ossrhPass") ? project.getProperty("ossrhPass") : System.getenv("OSSRH_PASS")

        if (ossrhUser != null && ossrhPass != null) {
            apply plugin: 'signing'
            apply plugin: 'name.remal.maven-publish-ossrh'

            repositories {
                ossrh {
                    credentials {
                        username = ossrhUser
                        password = ossrhPass
                    }
                }
            }
        }
    }
}

repositories {
    mavenCentral()
}

release {
    tagTemplate = 'v$version'
}
