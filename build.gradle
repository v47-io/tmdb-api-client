plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.31'
    id 'io.gitlab.arturbosch.detekt' version '1.0.0-RC14'
    id 'net.researchgate.release' version '2.8.0'
    id 'org.jetbrains.dokka' version '0.9.18'
}

apply plugin: 'jacoco'

apply plugin: 'maven'
apply plugin: 'maven-publish'

apply from: 'libraries.gradle'

sourceSets {
    main {
        kotlin {
            srcDirs {
                'src'
            }
        }
        java {
            srcDir 'src'
            srcDir 'src-gen'
        }
        resources {
            srcDir 'resources'
            srcDir 'resources-gen'
        }
    }
    test {
        kotlin {
            srcDirs {
                'test'
            }
        }
        java {
            srcDir 'test'
        }
        resources {
            srcDir 'test-resources'
        }
    }
    integrationTest {
        kotlin {
            srcDirs {
                "$projectDir/integration-test"
            }
        }
        java {
            srcDir "$projectDir/integration-test"
        }
        resources {
            srcDir "$projectDir/integration-test-resources"
        }
    }
}

sourceCompatibility = 11
targetCompatibility = 11

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xno-param-assertions', '-Xno-call-assertions']
        kotlinOptions.jvmTarget = '11'
    }
}

compileTestKotlin {
    kotlinOptions.jvmTarget = '11'
}

compileIntegrationTestKotlin {
    kotlinOptions.jvmTarget = '11'
}

repositories {
    maven { url 'https://nexus.vemilyus.com/repository/maven-all/' }
}

dependencies {
    implementation libraries.stdlib
    implementation libraries.slf4j

    compileOnly libraries.jacksonDatabind

    api libraries.nvI18n

    api libraries.r4jRatelimiter
    implementation libraries.r4jRxjava
    api libraries.r4jTimeLimiter
    api libraries.rxJava

    testImplementation libraries.logback

    testRuntime libraries.jacksonDatabind
    testRuntime libraries.jacksonModuleKotlin

    testImplementation libraries.mnHttpClient
    testImplementation libraries.mockitoKotlin
    testImplementation libraries.junitApi
    testRuntime libraries.junitEngine

    integrationTestImplementation sourceSets.main.output
    integrationTestImplementation sourceSets.test.output

    integrationTestImplementation configurations.compile
    integrationTestImplementation configurations.testCompile

    integrationTestRuntimeOnly configurations.runtime
    integrationTestRuntimeOnly configurations.testRuntime
}

detekt {
    input = files('src')
    config = files('detekt.yml')
    filters = '.*test.*,.*/resources/.*,.*/tmp/.*'

    reports {
        xml {
            enabled = true
            destination = file("$buildDir/reports/detekt.xml")
        }
    }
}

jacoco {
    toolVersion = '0.8.3'
}

test {
    useJUnitPlatform()
    jacoco {
        destinationFile = file("$buildDir/jacoco/test.exec")
    }
}

task integrationTest(type: Test) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Runs the integration tests.'

    maxHeapSize = '1024m'

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    binResultsDir = file("$buildDir/integration-test-results/binary/integrationTest")

    reports {
        html.destination = file("$buildDir/reports/integration-test")
        junitXml.destination = file("$buildDir/integration-test-results")
    }

    jacoco {
        destinationFile = file("$buildDir/jacoco/integrationTest.exec")
    }

    mustRunAfter 'test'
}

release {
    tagTemplate = 'v$version'
}

dokka {
    moduleName = project.name

    outputFormat = 'html'
    outputDirectory = "$buildDir/kdoc"

    jdkVersion = 11

    impliedPlatforms = ["JVM"]

    noStdlibLink = false
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
}

task packageJavadoc(type: Jar, dependsOn: dokkaJavadoc) {
    classifier = 'javadoc'
    from "$buildDir/javadoc"
}

task packageSources(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts.archives packageSources

publishing {
    publications {
        mavenProject(MavenPublication) {
            from components.java
            groupId project.group
            artifactId project.name
            version project.version

            artifact packageSources {
                classifier 'sources'
            }

            artifact packageJavadoc {
                classifier 'javadoc'
            }
        }
    }

    def nexusUser = project.hasProperty('nexusUser') ? project.property('nexusUser') : System.getenv('NEXUS_USER')
    def nexusPass = project.hasProperty('nexusPass') ? project.property('nexusPass') : System.getenv('NEXUS_PASS')

    if (nexusUser != null && nexusPass != null) {
        repositories {
            maven {
                name 'vemilyus-nexus'

                if (project.version.endsWith('-SNAPSHOT'))
                    url 'https://nexus.vemilyus.com/repository/snapshots/'
                else
                    url 'https://nexus.vemilyus.com/repository/releases/'

                credentials(PasswordCredentials) {
                    username nexusUser
                    password nexusPass
                }
            }
        }
    }
}
